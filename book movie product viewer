#!/usr/bin/env python3

class Rectangle:
    def __init__(self, height=0.0, width=0.0):
        self.height = height
        self.width = width


    def get_perimeter(self):
        sum = int(self.height + self.height + self.width + self.width)
        return sum

    def get_area(self):
        return self.height * self.width

    def draw(self):
        for i in range(self.height):
            if i in [0]:
                print("* " * (self.width))
            elif i in [(self.height - 1)]:
                print("* " * (self.width))
            else:
                print("*" + "  " * (self.width - 2) + " *")





#!/usr/bin/env python3

class Product:
    def __init__(self, name="", price=0.0, discount_percent=0):
        self.name = name
        self.price = price
        self.discount_percent = discount_percent


    def get_discount_amount(self):
        return self.price * self.discount_percent / 100

    def get_discount_price(self):
        return self.price - self.get_discount_amount()

    def get_description(self):
        return self.name


class Book(Product):
    def __init__(self, name="", price=0.0, discount_percent=0, author=""):
        # call the contrcutor of the superclass
        Product.__init__(self, name, price, discount_percent)

        self.author = author

    # override the Get_description method
    def get_description(self):
        return Product.get_description(self) + " by " + self.author


class Movie(Product):
    def __init__(self, name="", price=0.0, discount_percent=0, year=0):
        # call the constructor of the superclass
        Product.__init__(self, name, price, discount_percent)

        self.year = year

    # override the Get_description method
    def get_description(self):
        return Product.get_description(self) + " (" + str(self.year) + ") "
        
        
        
        
      #!/usr/bin/env python3

class Product:
    def __init__(self, name="", price=0.0, discount_percent=0):
        self.name = name
        self.price = price
        self.discount_percent = discount_percent


    def get_discount_amount(self):
        return self.price * self.discount_percent / 100

    def get_discount_price(self):
        return self.price - self.get_discount_amount()

    def get_description(self):
        return self.name


class Book(Product):
    def __init__(self, name="", price=0.0, discount_percent=0, author=""):
        # call the contrcutor of the superclass
        Product.__init__(self, name, price, discount_percent)

        self.author = author

    # override the Get_description method
    def get_description(self):
        return Product.get_description(self) + " by " + self.author


class Movie(Product):
    def __init__(self, name="", price=0.0, discount_percent=0, year=0):
        # call the constructor of the superclass
        Product.__init__(self, name, price, discount_percent)

        self.year = year

    # override the Get_description method
    def get_description(self):
        return Product.get_description(self) + " (" + str(self.year) + ") "
